name: Pytest CI

on:
  push:
    branches:
      - version-14
  pull_request:
    branches:
      - version-14
env:
    BRANCH_NAME: ${{ github.base_ref || github.ref_name }}


# concurrency:
#   group: develop-cloud_storage-${{ github.event.number }}
#   cancel-in-progress: true

jobs:
  tests:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
      fail-fast: false
    name: Server

    services:
      mariadb:
        image: mariadb:10.6
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: YES
          MYSQL_ROOT_PASSWORD: 'admin'
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=5s --health-timeout=2s --health-retries=3

    steps:
      - name: Clone
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          check-latest: true
          # cache: 'yarn'  # Replaces `Get yarn cache directory path` and `yarn-cache` steps
    
      # Uncomment if running locally, remove after local testing (already available in github actions environment)
      - name: Install Yarn
        run: npm install -g yarn

      - name: Add to Hosts
        run: echo "127.0.0.1 test_site" | sudo tee -a /etc/hosts

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/*requirements.txt', '**/pyproject.toml', '**/setup.py', '**/setup.cfg') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-

      # - name: Get yarn cache directory path
      #   id: yarn-cache-dir-path
      #   run: 'echo "::set-output name=dir::$(yarn cache dir)"'

      # - uses: actions/cache@v3
      #   id: yarn-cache
      #   with:
      #     path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
      #     key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
      #     restore-keys: |
      #       ${{ runner.os }}-yarn-

      - name: Install JS Dependencies
        run: yarn --prefer-offline

      - name: Install App Dependencies
        run: bash ${{ github.workspace }}/.github/helper/install_dependencies.sh

      - name: Install Bench Site and Apps
        env:
          MYSQL_HOST: 'localhost'
          MYSQL_PWD: 'admin'
          BRANCH_NAME: ${{ env.BRANCH_NAME}}
        run: |
          bash ${{ github.workspace }}/.github/helper/install.sh

      - name: Run Tests
        working-directory: /home/runner/frappe-bench/
        run: |
          source env/bin/activate
          cd apps/beam
          pytest --cov=beam --disable-warnings -s

      # - name: Post coverage report comment
      #   working-directory: /home/runner/frappe-bench/
      #   run: |
      #     # print current working directory
      #     pwd
      #     ls
      #     cd apps/
      #     ls
      #     cd beam/coverage.html
      #     # Read the HTML coverage report
      #     coverageReport=$(cat index.html)

      #     # Create a JSON payload with the comment body
      #     payload=$(jq -n --arg body "$coverageReport" '{"body": $body}')
      #     # Post the comment using the GitHub API
      #     curl -X POST \
      #       -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
      #       -H "Accept: application/vnd.github.v3+json" \
      #       -d "$payload" \
      #       "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments"


      - name: Post coverage report comment
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const coverageReport = fs.readFileSync('/home/runner/frappe-bench/apps/beam/coverage.html/index.html', 'utf8');
            const comment = `Coverage report:\n\n${coverageReport}\n`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      # - name: Upload coverage to Codecov
      #   working-directory: /home/runner/frappe-bench
      #   uses: codecov/codecov-action@v4
      #   with:
      #     directory: ./coverage/reports/
      #     fail_ci_if_error: true
      #     files: ./coverage1.xml,./coverage2.xml,!./cache
      #     flags: unittests
      #     name: codecov-umbrella
      #     token: ${{ secrets.CODECOV_TOKEN }}
      #     verbose: true
